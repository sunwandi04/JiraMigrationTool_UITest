Index: tests/test_migration_field.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\nimport time\nimport allure\nimport pytest\nfrom allure_commons._allure import step\nfrom page_objects.Migrationtool.field_page import MigrationField\n\n\n@pytest.fixture(scope='class')\ndef migration_field(request, page, env):\n    migration_field = MigrationField(page)\n    request.cls.migration_field = migration_field\n    migration_field.login_again()\n    # 当前页面：第2页\n    migration_field.click_by_button(\"开始解析\")\n\n    time.sleep(2)\n    migration_field.click_by_button(\"下一步\")\n    time.sleep(2)\n    migration_field.click_by_button(\"下一步\")\n    time.sleep(2)\n    # migration_field.click_by_button(\"下一步\")\n    # migration_field.page.wait_for_timeout(2)\n    # _, is_v = migration_field.is_viaible('//*[text()=\"请选择 Jira 项目\"]', wait_time=3)\n    # if is_v:\n    #     migration_field.click_some_checkbox()\n    # # 当前页面：第5页\n    # if migration_field.is_viaible(\"请选择 Jira 项目\"):\n    #     migration_field.click_some_checkbox()\n    # else:\n    #     migration_field.click_by_button(\"下一步\")\n    # time.sleep(2)\n    migration_field.click_by_button(\"下一步\")\n    time.sleep(2)\n    migration_field.click_by_button(\"下一步\")\n    time.sleep(2)\n    yield migration_field\n\n\n@pytest.mark.usefixtures('migration_field', 'env')\n@allure.story('Jira迁移工具-7.迁移属性')\nclass TestMigrationField:\n    @allure.title('T206589 迁移属性-页面布局检查')\n    @pytest.mark.run(order=1)\n    def test_migration_field_layout(self, migration_field):\n        with step(\"检查迁移操作说明\"):\n            migration_field.contains(\"迁移操作说明：\")\n            migration_field.contains(\"系统属性的映射规则已确定，不可更改。\")\n\n        with step(\"hover迁移操作说明\"):\n            # pass\n            # migration_field.hover(\"\")\n            migration_field.page.get_by_role(\"cell\", name=\"* 迁移操作\").get_by_role(\"img\").click()\n            # migration_field.page.locator(\"//*[text()='迁移操作']/following-sibling::*\").click()\n            migration_field.contains(\"创建为 ONES 新的自定义属性\")\n            migration_field.contains(\"ONES 系统属性的映射规则已确定，不可更改\")\n            # migration_field.page.get_by_role(\"tooltip\", name=\"1. 迁移操作说明： 1.1 创建：创建为 ONES 新的自定义工作项类型； 1.2 映射：映射为 ONES 已有的工作项类型，仅支持一对一映射； 1.3 取消迁移：对应的 Jira 问题及业务数据将不会迁移至 ONES。 2. 迁移至 ONES 后，ONES 映射关系将无法更改。\").get_by_text(\"映射：映射为 ONES 已有的工作项类型，仅支持一对一映射；\").click()\n\n    @allure.title('T206580 迁移属性，搜索属性')\n    @pytest.mark.run(order=2)\n    def test_search_field(self):\n        migration_field = self.migration_field\n        with step(\"搜索输入：ID\"):\n            time.sleep(1)\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"ID\")\n            time.sleep(1)\n            migration_field.page.get_by_role(\"cell\", name=\"问题属性 (1)\").get_by_role(\"img\").click()\n            migration_field.page.get_by_role(\"cell\", name=\"问题属性 (1)\").get_by_role(\"img\").click()\n\n            migration_field.contains(\"系统属性\")\n            migration_field.contains(\"创建\")\n\n            migration_field.clear_search_field()\n\n        with step(\"搜索输入：12345\"):\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"12345\")\n            migration_field.element_is_exist('//div[text()=\"暂无匹配结果\"]')\n            migration_field.clear_search_field()\n\n    @allure.title('T206588 迁移属性，属性列表检查')\n    @pytest.mark.run(order=3)\n    def test_check_field_list(self):\n        migration_field = self.migration_field\n        with step(\"查看「迁移属性」列表-Jira 属性\"):\n            migration_field.contains(\"问题属性\")\n            migration_field.contains(\"项目\")\n        with step(\"查看「迁移属性」列表-Jira 属性类型宝包含：系统属性\"):\n            migration_field.contains(\"系统属性\")\n        with step(\"查看「迁移属性」列表-迁移效果\"):\n            migration_field.contains(\"不支持自助迁移\")\n        with step(\"查看「迁移属性」列表-迁移操作\"):\n            migration_field.contains(\"映射\")\n            migration_field.contains(\"创建\")\n            migration_field.contains(\"取消迁移\")\n        with step(\"查看「迁移属性」列表-ONES 工作项属性\"):\n            pass\n            # migration_field.contains(\"工作项类型\")\n        with step(\"查看「迁移属性」列表-ONES属性类型\"):\n            migration_field.contains(\"系统属性\")\n\n    @allure.title('T207010 迁移属性，属性图例检查')\n    @pytest.mark.run(order=4)\n    def test_check_field_icon(self):\n        migration_field = self.migration_field\n        with step(\"hover至ONES 属性名称-描述旁边的问号\"):\n            migration_field.page.get_by_role(\"cell\", name=\"描述\").get_by_role(\"img\").click()\n\n        with step(\"hover至ONES 属性名称-关联发布旁边的问号\"):\n            migration_field.page.get_by_role(\"cell\", name=\"关联发布\").locator(\"path\").nth(1).click()\n\n    @allure.title('迁移属性，保存迁移属性配置')\n    @pytest.mark.run(order=5)\n    def test_check_field_conf(self):\n        migration_field = self.migration_field\n        with step(\"点击「上一步」\"):\n            migration_field.click_by_button(\"上一步\")\n            time.sleep(2)\n        with step(\"在「选择 Jira项目」页面，点击「下一步」\"):\n            migration_field.click_by_button(\"下一步\")\n            time.sleep(2)\n        with step(\"查看页面配置\"):\n            migration_field.contains(\"ID\")\n            migration_field.visible('//span[text()=\"取消迁移\"]')\n\n    @allure.title('T206583 迁移属性，映射列表可选值检查')\n    @pytest.mark.run(order=6)\n    def test_check_field_rule_value(self, page, migration_field):\n        with step(\"Resolution 迁移操作设置为「映射」查看ONES工作项属性可选值\"):\n            # migration_field.check_field_rule_value(page)\n            pass\n\n    @allure.title('T207009 迁移属性，映射规则检查')\n    @pytest.mark.run(order=7)\n    def test_check_field_rule(self, page, migration_field):\n        with step(\"Resolution 迁移操作设置为「映射」，查看ONES工作项属性可选值\"):\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"Resolution\")\n            migration_field.clear_search_field()\n\n        with step(\"搜索属性：0000-文本框（单行），并设置为映射,查看ONES工作项属性可选值\"):\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"0000-文本框（单行\")\n            time.sleep(1)\n            if page.is_visible('//div[text()=\"暂无匹配结果\"]'):\n                return\n            else:\n                page.get_by_role(\"cell\", name=\"创建\").get_by_text(\"创建\").click()\n                page.get_by_text(\"映射\", exact=True).click()\n                page.locator('(//div[@class=\"ones-select-selector\"])[2]').click()\n                migration_field.contains(\"暂无数据\")\n            migration_field.clear_search_field()\n\n        with step(\"搜索属性：Project Description，并设置为映射,查看ONES工作项属性可选值\"):\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"Project Description\")\n            # page.locator('//input[@placeholder=\"搜索 Jira 属性名称\"]').click()\n            # page.locator(\".ones-input-clear-icon\").click()\n            # time.sleep(1)\n            # page.get_by_placeholder(\"搜索 Jira 属性名称\").click()\n            # page.get_by_placeholder(\"搜索 Jira 属性名称\").fill(\"Project Description\")\n            time.sleep(1)\n            page.get_by_role(\"cell\", name=\"创建\").get_by_text(\"创建\").click()\n            page.get_by_text(\"映射\", exact=True).click()\n            page.locator('(//div[@class=\"ones-select-selector\"])[2]').click()\n            migration_field.contains(\"暂无数据\")\n            migration_field.clear_search_field()\n\n        with step(\"搜索属性：Project URL，并设置为映射,查看ONES工作项属性可选值\"):\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"Project URL\")\n            # page.locator('//input[@placeholder=\"搜索 Jira 属性名称\"]').click()\n            # page.locator(\".ones-input-clear-icon\").click()\n            # time.sleep(1)\n            # page.get_by_placeholder(\"搜索 Jira 属性名称\").click()\n            # page.get_by_placeholder(\"搜索 Jira 属性名称\").fill(\"Project URL\")\n            time.sleep(1)\n            page.get_by_role(\"cell\", name=\"创建\").get_by_text(\"创建\").click()\n            page.get_by_text(\"映射\", exact=True).click()\n            page.locator('(//div[@class=\"ones-select-selector\"])[2]').click()\n            migration_field.contains(\"暂无数据\")\n            migration_field.clear_search_field()\n\n    @allure.title('T206584 迁移属性，存在未设置的工作项属性')\n    @pytest.mark.run(order=8)\n    def test_no_ones_field(self, page, migration_field):\n        with step(\"搜索属性：Affects Version/s，并设置为映射,查看ONES工作项属性可选值为空\"):\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"Affects Version/s\")\n            time.sleep(1)\n            # self.set_action_and_check_result(page, migration_field, \"映射\")\n            ##-----------需要调试——————————————————————————————————————————\n            self.set_action_and_check_result(page, \"创建\", \"映射\")\n            migration_field.clear_search_field()\n\n        with step(\"搜索属性：Labels，并设置为映射,查看ONES工作项属性可选值为空\"):\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"Labels\")\n            time.sleep(1)\n            # self.set_action_and_check_result(page, migration_field, \"映射\")\n            self.set_action_and_check_result(page, \"创建\", \"映射\")\n            migration_field.clear_search_field()\n\n        with step(\"搜索属性：Component/s，并设置为映射,查看ONES工作项属性可选值为空\"):\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"Component/s\")\n            time.sleep(1)\n            # self.set_action_and_check_result(page, migration_field, \"映射\")\n            self.set_action_and_check_result(page, \"创建\", \"映射\")\n            migration_field.clear_search_field()\n\n    @allure.title(\"T206592 迁移属性，默认迁移操作检查\")\n    @pytest.mark.run(order=9)\n    def test_default_action(self, page, migration_field):\n        with step(\"查看「迁移属性」列表-默认「映射」的属性\"):\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"Status\")\n            migration_field.contains(\"映射\")\n            migration_field.clear_search_field()\n\n        with step(\"查看「迁移属性」列表-默认「创建」的属性\"):\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"Resolution\")\n            migration_field.contains(\"创建\")\n            migration_field.clear_search_field()\n\n        with step(\"查看「迁移属性」列表-默认「取消迁移」的属性\"):\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"部署概览\")\n            migration_field.contains(\"取消迁移\")\n            migration_field.clear_search_field()\n\n        with step(\"查看底部迁移属性统计\"):\n            migration_field.contains('个属性取消迁移')\n            migration_field.contains(\"个属性不支持自助迁移\")\n\n    @allure.title(\"T206582 迁移属性，ONES工作项属性无可选值检查\")\n    @pytest.mark.run(order=10)\n    def test_field_disable_click(self, page, migration_field):\n        with step(\"点击展开单行文本 的迁移操作下拉框，选择「映射」\"):\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"单行\")\n            time.sleep(1)\n            _, is_v = migration_field.visible('//div[text()=\"暂无匹配结果\"]')\n            if is_v:\n                pass\n            else:\n                migration_field.set_action_and_check_result(page, \"创建\", \"映射\")\n            migration_field.clear_search_field()\n\n    @allure.title(\"T206590 迁移属性，迁移操作选择：取消迁移\")\n    @pytest.mark.run(order=11)\n    def test_set_cancel_operate(self, page, migration_field):\n        with step(\"史诗名称  迁移操作设置为「取消迁移」\"):\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"史诗名称\")\n            time.sleep(1)\n            _, is_v = migration_field.visible('//div[text()=\"暂无匹配结果\"]')\n            if is_v:\n                pass\n            else:\n                self.set_action_and_check_result(page, migration_field, \"取消迁移\")\n            migration_field.clear_search_field()\n\n    @allure.title(\"T206587 迁移属性，迁移操作选择：创建\")\n    @pytest.mark.run(order=12)\n    def test_set_create_operate(self, page, migration_field):\n        with step(\"史诗名称  迁移操作设置为「创建」\"):\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"史诗名称\")\n            time.sleep(1)\n            _, is_v = migration_field.visible('//div[text()=\"暂无匹配结果\"]', wait_time=3)\n\n            if is_v:\n                pass\n            else:\n                migration_field.set_action_and_check_result(page, \"创建\", \"创建\")\n                migration_field.visible('//span[text()=\"单行文本\"]')\n            migration_field.clear_search_field()\n\n    @allure.title(\"T206586 迁移属性，迁移操作选择：映射\")\n    @pytest.mark.run(order=13)\n    def test_set_map_operate(self, page, migration_field):\n        with step(\"Resolution 迁移操作设置为「映射」，查看ONES工作项属性可选值\"):\n            # 先初始化一下\n            migration_field.set_resolution_to_create(page)\n            migration_field.search_jira_pro(\"搜索 Jira 属性名称\", \"Resolution\")\n            time.sleep(1)\n            migration_field.set_action_and_check_result(page, \"创建\", \"映射\")\n            page.get_by_text(\"映射\", exact=True).click()\n            page.locator('(//input[@type=\"search\"])[2]').click()\n            migration_field.contains(\"需求类型\")\n            migration_field.contains(\"操作系统\")\n            migration_field.contains(\"浏览器\")\n            migration_field.clear_search_field()\n\n        with step(\"ONES工作项属性选择「问题单分析」\"):\n            page.locator('//div[text()=\"问题单分析\"]').click()\n            migration_field.visible('//span[text()=\"单选菜单\"]')\n\n        with step(\"点击设置图标\"):\n            page.locator('//span[text()=\"单选菜单\"]//following-sibling::*/*').click()\n\n        with step(\"查看jira选项名称\"):\n            migration_field.contains(\"Done\")\n            migration_field.contains(\"完成\")\n            migration_field.contains(\"重复提交\")\n            migration_field.contains(\"Unresolved\")\n            migration_field.contains(\"无法再次复现\")\n\n        with step(\"点击展开ONES属性下拉列表，查看可选值\"):\n            page.locator('(//span[@title=\"基本场景漏测\"])[1]').click()\n            migration_field.contains(\"特殊场景漏测\")\n            migration_field.contains(\"重复问题\")\n            migration_field.contains(\"新需求引入\")\n            page.locator('//div[text()=\"编辑选项\"]').click()\n            time.sleep(2)\n\n        with step(\"Done映射为「不修复」\"):\n            page.locator('//span[@title=\"修改引入\"]').click()\n            # page.locator('(//div[text()=\"需求不明确\"])[1]')\n            # page.mouse.wheel(0, 80)\n            # page.mouse.move(0, 80)\n            # page.element.press(\"ArrowDown\")\n            # page.locator('(//div[text()=\"不修复\" and @class=\"ones-select-item-option-content\"])[2]').click()\n            #\n            # element = page.locator('(//div[text()=\"不修复\" and @class=\"ones-select-item-option-content\"])[2]')\n            # element.press(\"ArrowDown\")\n            # # element. ScrollIntoViewIfNeededAsync().click()\n            time.sleep(2)\n            # element = page.locator(\"div .rc-virtual-list-holder:visible:has-text('需求不明确'):visible\").nth(0)\n            # element.hover()\n            # for i in range(10):\n            #     element.press(\"ArrowDown\")\n\n            page.locator(\"div .rc-virtual-list-holder:visible:has-text('需求不明确'):visible\").click()\n            migration_field.click_by_button('确定')\n\n            # 完成映射为「不修复」\n            # page.locator('//div[text()=\"编辑选项\"]').click()\n            # page.locator('(//span[@title=\"基本场景漏测\"])[1]').click()\n            # page.locator('//div[text()=\"不修复\"]').click()\n            #\n            # # solve later映射为「转需求」\n            # page.locator('//div[text()=\"编辑选项\"]').click()\n            # page.locator('//span[@title=\"易用性问题\"]').click()\n            # page.locator('(//div[text()=\"转需求\"])[3]').click()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/test_migration_field.py b/tests/test_migration_field.py
--- a/tests/test_migration_field.py	
+++ b/tests/test_migration_field.py	
@@ -68,7 +68,7 @@
             migration_field.page.get_by_role("cell", name="问题属性 (1)").get_by_role("img").click()
 
             migration_field.contains("系统属性")
-            migration_field.contains("创建")
+            migration_field.visible('//span[@title="创建"]')
 
             migration_field.clear_search_field()
 
@@ -184,21 +184,21 @@
             time.sleep(1)
             # self.set_action_and_check_result(page, migration_field, "映射")
             ##-----------需要调试——————————————————————————————————————————
-            self.set_action_and_check_result(page, "创建", "映射")
+            migration_field.set_action_and_check_result(page, "创建", "映射")
             migration_field.clear_search_field()
 
         with step("搜索属性：Labels，并设置为映射,查看ONES工作项属性可选值为空"):
             migration_field.search_jira_pro("搜索 Jira 属性名称", "Labels")
             time.sleep(1)
             # self.set_action_and_check_result(page, migration_field, "映射")
-            self.set_action_and_check_result(page, "创建", "映射")
+            migration_field.set_action_and_check_result(page, "创建", "映射")
             migration_field.clear_search_field()
 
         with step("搜索属性：Component/s，并设置为映射,查看ONES工作项属性可选值为空"):
             migration_field.search_jira_pro("搜索 Jira 属性名称", "Component/s")
             time.sleep(1)
             # self.set_action_and_check_result(page, migration_field, "映射")
-            self.set_action_and_check_result(page, "创建", "映射")
+            migration_field.set_action_and_check_result(page, "创建", "映射")
             migration_field.clear_search_field()
 
     @allure.title("T206592 迁移属性，默认迁移操作检查")
@@ -227,41 +227,54 @@
     @pytest.mark.run(order=10)
     def test_field_disable_click(self, page, migration_field):
         with step("点击展开单行文本 的迁移操作下拉框，选择「映射」"):
+            page.reload()
+            time.sleep(1)
             migration_field.search_jira_pro("搜索 Jira 属性名称", "单行")
             time.sleep(1)
-            _, is_v = migration_field.visible('//div[text()="暂无匹配结果"]')
-            if is_v:
-                pass
-            else:
-                migration_field.set_action_and_check_result(page, "创建", "映射")
+            # 兼容搜索不到的场景
+            # _, is_v = migration_field.visible('//div[text()="暂无匹配结果"]')
+            # if is_v:
+            #     pass
+            # else:
+            #     migration_field.set_action_and_check_result(migration_field, "创建", "映射")
+            migration_field.set_action_and_check_result(page, "创建", "映射")
             migration_field.clear_search_field()
 
     @allure.title("T206590 迁移属性，迁移操作选择：取消迁移")
     @pytest.mark.run(order=11)
     def test_set_cancel_operate(self, page, migration_field):
         with step("史诗名称  迁移操作设置为「取消迁移」"):
+            page.reload()
+            time.sleep(1)
             migration_field.search_jira_pro("搜索 Jira 属性名称", "史诗名称")
             time.sleep(1)
-            _, is_v = migration_field.visible('//div[text()="暂无匹配结果"]')
-            if is_v:
-                pass
-            else:
-                self.set_action_and_check_result(page, migration_field, "取消迁移")
+            # 兼容搜索不到的场景
+            # _, is_v = migration_field.visible('//div[text()="暂无匹配结果"]')
+            # if is_v:
+            #     pass
+            # else:
+            #     migration_field.set_action_and_check_result(migration_field, "创建", "取消迁移")
+            migration_field.set_action_and_check_result(page, "创建", "取消迁移")
             migration_field.clear_search_field()
 
     @allure.title("T206587 迁移属性，迁移操作选择：创建")
     @pytest.mark.run(order=12)
     def test_set_create_operate(self, page, migration_field):
         with step("史诗名称  迁移操作设置为「创建」"):
+            page.reload()
+            time.sleep(1)
             migration_field.search_jira_pro("搜索 Jira 属性名称", "史诗名称")
             time.sleep(1)
-            _, is_v = migration_field.visible('//div[text()="暂无匹配结果"]', wait_time=3)
-
-            if is_v:
-                pass
-            else:
-                migration_field.set_action_and_check_result(page, "创建", "创建")
-                migration_field.visible('//span[text()="单行文本"]')
+            # 兼容没有搜到结果的场景
+            # _, is_v = migration_field.visible('//div[text()="暂无匹配结果"]', wait_time=3)
+            # if is_v:
+            #     pass
+            # else:
+            #     migration_field.set_action_and_check_result(migration_field, "创建", "创建")
+            #     migration_field.visible('//span[text()="单行文本"]')
+            migration_field.set_action_and_check_result(page, "创建", "创建")
+            migration_field.visible('//span[text()="单行文本"]')
+
             migration_field.clear_search_field()
 
     @allure.title("T206586 迁移属性，迁移操作选择：映射")
@@ -269,7 +282,9 @@
     def test_set_map_operate(self, page, migration_field):
         with step("Resolution 迁移操作设置为「映射」，查看ONES工作项属性可选值"):
             # 先初始化一下
-            migration_field.set_resolution_to_create(page)
+            # migration_field.set_resolution_to_create(page)
+            page.reload()
+            time.sleep(1)
             migration_field.search_jira_pro("搜索 Jira 属性名称", "Resolution")
             time.sleep(1)
             migration_field.set_action_and_check_result(page, "创建", "映射")
@@ -278,7 +293,6 @@
             migration_field.contains("需求类型")
             migration_field.contains("操作系统")
             migration_field.contains("浏览器")
-            migration_field.clear_search_field()
 
         with step("ONES工作项属性选择「问题单分析」"):
             page.locator('//div[text()="问题单分析"]').click()
@@ -321,6 +335,7 @@
 
             page.locator("div .rc-virtual-list-holder:visible:has-text('需求不明确'):visible").click()
             migration_field.click_by_button('确定')
+            migration_field.clear_search_field()
 
             # 完成映射为「不修复」
             # page.locator('//div[text()="编辑选项"]').click()
Index: page_objects/Migrationtool/field_page.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import re\nimport time\n\nfrom page_objects.base_page import BasePage\nfrom page_objects.Migrationtool.choose_jira_pro_page import ChooseJiraPro\n\nclass MigrationField(ChooseJiraPro):\n\n    def clear_search_field(cls):\n        # 清空搜索\n        cls.page.locator('//input[@placeholder=\"搜索 Jira 属性名称\"]').clear()\n\n    def expand_fold_field(self):\n        \"\"\"\n\n        :return:\n        \"\"\"\n        # 问题属性展开/折叠\n        self.page.locator('//span[text()=\"问题属性\"]/preceding-sibling::*/*')\n\n    def set_action_and_check_result(self, page, name, operate):\n        # \"\"\"\n        #  目的：用于设置迁移操作，且校验内容\n        # :param page: 当前页面\n        # :param name: 当前已经显示的操作。可选值有创建、映射、取消迁移\n        # :param operate: 需要进行的操作：创建、映射、取消迁移\n        # :return:\n        # \"\"\"\n\n        # page.locator(f'//span[@title=\"{name}\"]').click()\n        # time.sleep(0.5)\n        # page.locator(f'//div[text()=\"{operate}\"]').click()\n\n        # page.get_by_title(f\"{operate}\").get_by_text(f\"{operate}\").click()\n        # page.get_by_text(f\"{operate}\", exact=True).click()\n        # 点击下拉框操作，并且传入operate值\n\n        page.get_by_role(\"cell\", name=f\"{name}\").get_by_title(f\"{name}\").click()\n        page.locator(f'div .rc-virtual-list-holder-inner:visible:has-text(\"{operate}\"):visible')\n\n    def check_field_rule_value(self,page):\n        \"\"\"Resolution 迁移操作设置为「映射」查看ONES工作项属性可选值\"\"\"\n        self.search_jira_pro(\"搜索 Jira 属性名称\", \"Resolution\")\n        time.sleep(0.5)\n        # self.set_action_and_check_result(page, \"创建\", \"映射\")\n        page.locator('//span[@title=\"创建\"]').click()\n        time.sleep(0.5)\n        page.locator('//div[text()=\"映射\"]').click()\n        page.locator('(//span[@class=\"ones-select-selection-search\"]/*)[2]').click()\n        time.sleep(0.5)\n        self.visible('//div[@title=\"浏览器\"]')\n        self.contains(\"浏览器\")\n        self.contains(\"操作系统\")\n\n    def set_resolution_to_create(self,page):\n        \"\"\"将已经设置为映射的resolution属性，重新设置为创建。目的：当地于给这个属性初始化\"\"\"\n        self.search_jira_pro(\"搜索 Jira 属性名称\", \"Resolution\")\n        _,is_v = self.visible('//span[@title=\"映射\"]')\n        if is_v:\n            page.locator('//span[@title=\"映射\"]').click()\n            page.locator('//div[text()=\"创建\"]').click()\n            self.set_action_and_check_result(page,\"映射\",\"创建\")\n        else:\n            pass\n        self.clear_search_field()\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/page_objects/Migrationtool/field_page.py b/page_objects/Migrationtool/field_page.py
--- a/page_objects/Migrationtool/field_page.py	
+++ b/page_objects/Migrationtool/field_page.py	
@@ -55,11 +55,11 @@
     def set_resolution_to_create(self,page):
         """将已经设置为映射的resolution属性，重新设置为创建。目的：当地于给这个属性初始化"""
         self.search_jira_pro("搜索 Jira 属性名称", "Resolution")
-        _,is_v = self.visible('//span[@title="映射"]')
+        _, is_v = self.visible('//span[@title="映射"]')
         if is_v:
             page.locator('//span[@title="映射"]').click()
             page.locator('//div[text()="创建"]').click()
-            self.set_action_and_check_result(page,"映射","创建")
+            self.set_action_and_check_result(page, "映射", "创建")
         else:
             pass
         self.clear_search_field()
Index: page_objects/base_page.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import allure\nfrom playwright.sync_api import Page\n\n\nclass BasePage:\n    def __init__(self, page: Page):\n        self.page = page\n\n    @allure.step('Click locator - {locator}')\n    def click(self, locator: str):\n        self.page.locator(locator).click()\n\n    @allure.step('Click text - {text}')\n    def click_by_text(self, text: str):\n        self.page.get_by_text(text).click()\n\n    @allure.step('select option - {text} - {title}')\n    def select_option(self, title: str, text: str):\n        self.page.get_by_title(title).get_by_text(text).click()\n\n    @allure.step('Click button - {button}')\n    def click_by_button(self, button: str):\n        self.page.get_by_role(\"button\", name=button).click()\n\n    @allure.step('Click button - {button}')\n    def click_by_dialog_button(self, button: str):\n        self.page.get_by_role(\"dialog\").get_by_role(\"button\", name=button).click()\n\n    @allure.step('Click link - {link}')\n    def click_by_link(self, link: str):\n        self.page.get_by_role(\"link\", name=link).click()\n\n    @allure.step('Click label - {label}')\n    def click_by_label(self, label: str):\n        self.page.get_by_label(label).click()\n\n    @allure.step('Click title - {title}')\n    def click_by_title(self, title: str):\n        self.page.get_by_title(title).click()\n\n    @allure.step('Click tooltip - {tooltip}')\n    def click_by_tooltip(self, tooltip: str, text: str):\n        self.page.get_by_role(\"tooltip\", name=tooltip).get_by_text(text).click()\n\n    @allure.step('Click dropbox - {dropbox}')\n    def click_dropbox(self, name: str, dropbox: str):\n        self.page.get_by_role(\"row\", name=name).get_by_text(dropbox).click()\n\n    @allure.step('Check checkbox')\n    def check(self, locator: str):\n        self.page.get_by_label(text=locator, exact=True).check()\n\n    @allure.step('Uncheck checkbox')\n    def uncheck(self, locator: str):\n        self.page.get_by_label(text=locator, exact=True).uncheck()\n\n    @allure.step('Hover locator - {locator}')\n    def hover(self, locator: str):\n        self.page.locator(locator).hover()\n\n    @allure.step('Input text - {text} into label - {label}')\n    def input(self, label: str, text: str):\n        self.page.get_by_label(label).click()\n        self.page.get_by_label(label).fill(text)\n\n    @allure.step('Type text - {text} into placeholder - {placeholder}')\n    def type(self, placeholder: str, text: str):\n        self.page.get_by_placeholder(placeholder).click()\n        self.page.get_by_placeholder(placeholder).fill(text)\n\n    @allure.step('expand or fold text - {text} ')\n    def expand_fold(self, text: str):\n        self.page.get_by_role(\"cell\", name=text).get_by_role(\"img\").click()\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/page_objects/base_page.py b/page_objects/base_page.py
--- a/page_objects/base_page.py	
+++ b/page_objects/base_page.py	
@@ -1,5 +1,5 @@
 import allure
-from playwright.sync_api import Page
+from playwright.sync_api import Page, Error
 
 
 class BasePage:
@@ -72,3 +72,70 @@
     def expand_fold(self, text: str):
         self.page.get_by_role("cell", name=text).get_by_role("img").click()
 
+    @allure.step('Click textbox - {textbox}')
+    def click_by_textbox(self, textbox: str, text: str):
+        self.page.get_by_role("textbox", name=textbox).fill(text)
+
+    def visible(self, locator, wait_time=15, idx=1):
+
+        el = self.page.locator(locator)
+
+        try:
+            el.wait_for(timeout=wait_time * 1000)
+            # not found
+        except TimeoutError as e:
+                print(f'\nNot found: {e}')
+                return None, False
+
+        # multiple el found
+        except Error as ee:
+                # assert el.count() > 1, 'Expect multi elements'
+                if el.count() > 1:
+                    print(f"\n{'=' * 18} Multiple elements found{'=' * 18}\n{ee}")
+                    curr = el.nth(idx - 1)
+                    v = curr.is_visible()
+                    return curr, v
+                else:
+                    return None, False
+
+        if el.is_visible():
+            return el, True
+        else:
+            return el, False
+
+    def contains(self, text: str, el_type='text'):
+        _postfix = {
+            'text': '',
+            'input': 'input',
+            'textarea': 'textarea',
+            'dropdown': 'dropdown',
+            'div': 'div',
+            'table_cell': 'table_cell',
+        }
+        _pf = _postfix.get(el_type, '')
+        my_path = f'//*[contains(text(), "{text}")]'
+        if _pf:
+            my_path = my_path + f'/following-sibling::*//{_pf}'
+
+        v = self.visible(my_path)
+        if not v[1]:
+            # self._attach(my_path)
+            print(f'ElementNotFound: {text}')
+            raise AssertionError('ElementNotFound')
+
+        return v
+
+    def element_is_exist(self, locator, is_exist=True, wait_time=30):
+        """
+        断言页面是否存在元素
+        :param wait_time:
+        :param locator: 定位
+        :param is_exist: 断言 True or False
+        :return:
+        """
+        element, is_v = self.visible(locator, wait_time=wait_time)
+        assert is_v == is_exist, AssertionError('AssertionError')
+
+    def attach(self):
+        ...
+        # self.page.screenshot(path=)
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
deleted file mode 100644
--- a/.gitignore	
+++ /dev/null	
@@ -1,6 +0,0 @@
-/allure-report/
-/allure-results/
-/.pytest_cache/
-config.yaml
-.idea
-.pytest_cache
\ No newline at end of file
Index: main.spec
===================================================================
diff --git a/main.spec b/main.spec
deleted file mode 100644
--- a/main.spec	
+++ /dev/null	
@@ -1,44 +0,0 @@
-# -*- mode: python ; coding: utf-8 -*-
-
-
-block_cipher = None
-
-
-a = Analysis(
-    ['main.py'],
-    pathex=[],
-    binaries=[],
-    datas=[],
-    hiddenimports=[],
-    hookspath=[],
-    hooksconfig={},
-    runtime_hooks=[],
-    excludes=[],
-    win_no_prefer_redirects=False,
-    win_private_assemblies=False,
-    cipher=block_cipher,
-    noarchive=False,
-)
-pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
-
-exe = EXE(
-    pyz,
-    a.scripts,
-    a.binaries,
-    a.zipfiles,
-    a.datas,
-    [],
-    name='main',
-    debug=False,
-    bootloader_ignore_signals=False,
-    strip=False,
-    upx=True,
-    upx_exclude=[],
-    runtime_tmpdir=None,
-    console=True,
-    disable_windowed_traceback=False,
-    argv_emulation=False,
-    target_arch=None,
-    codesign_identity=None,
-    entitlements_file=None,
-)
Index: page_objects/Migrationtool/aaa.py
===================================================================
diff --git a/page_objects/Migrationtool/aaa.py b/page_objects/Migrationtool/aaa.py
deleted file mode 100644
--- a/page_objects/Migrationtool/aaa.py	
+++ /dev/null	
@@ -1,6 +0,0 @@
-class AAA:
-    def print_a(self):
-        print("aaaaaa---------")
-
-aa=AAA()
-aa.print_a()
\ No newline at end of file
Index: tests/test_login_ones.spec
===================================================================
diff --git a/tests/test_login_ones.spec b/tests/test_login_ones.spec
deleted file mode 100644
--- a/tests/test_login_ones.spec	
+++ /dev/null	
@@ -1,44 +0,0 @@
-# -*- mode: python ; coding: utf-8 -*-
-
-
-block_cipher = None
-
-
-a = Analysis(
-    ['test_login_ones.py'],
-    pathex=[],
-    binaries=[],
-    datas=[],
-    hiddenimports=[],
-    hookspath=[],
-    hooksconfig={},
-    runtime_hooks=[],
-    excludes=[],
-    win_no_prefer_redirects=False,
-    win_private_assemblies=False,
-    cipher=block_cipher,
-    noarchive=False,
-)
-pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
-
-exe = EXE(
-    pyz,
-    a.scripts,
-    a.binaries,
-    a.zipfiles,
-    a.datas,
-    [],
-    name='test_login_ones',
-    debug=False,
-    bootloader_ignore_signals=False,
-    strip=False,
-    upx=True,
-    upx_exclude=[],
-    runtime_tmpdir=None,
-    console=True,
-    disable_windowed_traceback=False,
-    argv_emulation=False,
-    target_arch=None,
-    codesign_identity=None,
-    entitlements_file=None,
-)
